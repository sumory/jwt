<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="
	http://www.springframework.org/schema/mvc 
	http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd 
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd        
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.2.xsd  
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
    http://www.springframework.org/schema/cache 
    http://www.springframework.org/schema/cache/spring-cache-3.1.xsd">


	
	<!-- c3p0 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
	 	destroy-method="close">
	 	<property name="user" value="root" />
		<property name="password" value="123456" />
		<property name="jdbcUrl" value="jdbc:mysql://192.168.1.149:3306/xiamener2?useUnicode=true&amp;characterEncoding=utf8&amp;autoReconnect=true&amp;zeroDateTimeBehavior=convertToNull" />
		<property name="driverClass" value="com.mysql.jdbc.Driver" />
		
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="AcquireIncrement"  value="3"/>     
		 <!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
	    <property name="AcquireRetryAttempts"  value="30"/> 
	      <!--两次连接中间隔时间，单位毫秒。Default: 1000 -->
	    <property name="AcquireRetryDelay" value="1000"/>   
	    <!--连接关闭时默认将所有未提交的操作回滚。Default: false -->
	    <property name="AutoCommitOnClose" value="false"/>
	    <!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。Default: false-->
	    <property name="BreakAfterAcquireFailure" value="false"/>
	    <!--当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出SQLException,如设为0则无限期等待。单位毫秒。Default: 0 -->
	    <property name="CheckoutTimeout" value="20000"/>                     
	    <property name="Description" value="A pooled c3p0 DataSource"/>
	    <property name="InitialPoolSize" value="10"/>
	    <property name="MinPoolSize" value="10"/>
	    <property name="MaxPoolSize" value="100"/>
	    <!--最大空闲时间,1800秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
	    <property name="MaxIdleTime" value="1800"/>
	    <!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0-->
	    <property name="MaxStatements" value="0"/>
	    <!--定义了连接池内单个连接所拥有的最大缓存statements数。Default: 0 -->
	    <property name="MaxStatementsPerConnection" value="100"/>
	    <!--c3p0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能通过多线程实现多个操作同时被执行。Default: 3-->
	    <property name="NumHelperThreads" value="5"/>
	    <!--通过实现ConnectionTester或QueryConnectionTester的类来测试连接。类名需制定全路径。Default: com.mchange.v2.c3p0.impl.DefaultConnectionTester-->
	    <property name="ConnectionTesterClassName" value="com.mchange.v2.c3p0.impl.DefaultConnectionTester"/>
	    <!--每段时间检查所有连接池中的空闲连接。时间为秒，Default: 0 -->
	     <property name="IdleConnectionTestPeriod" value="3600"/>
	    <!--c3p0将建一张名为Test的空表，并使用其自带的查询语句进行测试。如果定义了这个参数那么属性preferredTestQuery将被忽略。你不能在这张Test表上进行任何操作，它将只供c3p0测试使用。Default: null-->
		<property name="automaticTestTable" value="C3P0_TEST"/>
	    <!--如果设为true那么在取得连接的同时将校验连接的有效性。Default: false -->
	    <property name="TestConnectionOnCheckin" value="true"/>     
	    <!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable等方法来提升连接测试的性能。Default: false -->
	    <property name="TestConnectionOnCheckout" value="false"/>
	    <!--Strongly disrecommended. Setting this to true may lead to subtle and bizarre bugs.（文档原文）作者强烈建议不使用的一个属性-->
	    <property name="ForceIgnoreUnresolvedTransactions" value="false"/>
	    <!--早期的c3p0版本对JDBC接口采用动态反射代理。在早期版本用途广泛的情况下这个参数 允许用户恢复到动态反射代理以解决不稳定的故障。最新的非反射代理更快并且已经开始 广泛的被使用，所以这个参数未必有用。现在原先的动态反射与新的非反射代理同时受到支持，但今后可能的版本可能不支持动态反射代理。Default: false--> 
	    <property name="UsesTraditionalReflectiveProxies" value="false"/>
	 </bean>
	
	

	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
    <bean id="restTemplate" class="org.springframework.web.client.RestTemplate">  
    </bean>

	
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 注意多机部署时，缓存同步问题 -->
	<bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">    
	    <property name="caches">    
	       <set>    
	          <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="default" />    
	       </set>      
	    </property>    
	</bean>     
	

	<mvc:annotation-driven/>
	<context:component-scan base-package="com.xiamenair" />
	<tx:annotation-driven transaction-manager="txManager" />
	<cache:annotation-driven cache-manager="cacheManager"/>
</beans>